定义:

    REST：
    
    Roy Fielding博士在2000年他的博士论文中提出来的一种
    软件架构风格。它是一种针对网络应用的设计和开发方式，
    可以降低开发的复杂性，提高系统的可伸缩性。
    
    REST定义了Web的使用标准（这和大多数人的实际使用方式
    有很大不同），例如HTTP和URI。
    请求方式:get
    添加资源:1.post  创建子资源
             2.put   不存在时创建该资源
    删除:delete
    并且支持head操作，获取元数据，不返回表述(消息体)
    
		REST其实是一种组织Web服务的架构，而并不是我们想象的
		那样是实现Web服务的一种新的技术，更没有要求一定要使
		用HTTP。其目标是为了创建具有良好扩展性的分布式系统。
		
		URI(Uniform Resource Identifier)
		资源标识符
		
		不管是图片，Word还是视频文件，甚至只是一种虚拟的服务，
		也不管你是XML（标准通用标记语言下的一个子集）格式、
		txt文件格式还是其它文件格式，全部通过 URI对资源进行
		唯一的标识。

作为一种架构，其提出了一系列架构级约束。
    
    这些约束有：

    1.使用客户/服务器模型。客户和服务器之间通过一个统一
      的接口来互相通讯。
    
    2.层次化的系统。在一个REST系统中，客户端并不会固定地
      与一个服务器打交道。
      
    3.无状态。在一个REST系统中，服务端并不会保存有关客户
      的任何状态。也就是说，客户端自身负责用户状态的维持，
      并在每次发送请求时都需要提供足够的信息。
      
    4.可缓存。REST系统需要能够恰当地缓存请求，以尽量减少
      服务端和客户端之间的信息传输，以提高性能。
      
    5.统一的接口。一个REST系统需要使用一个统一的接口来完
      成子系统之间以及服务与用户之间的交互。这使得REST系
      统中的各个子系统可以独自完成演化。     

		    1.每个资源都拥有一个资源标识。每个资源的资源标识
		      可以用来唯一地标明该资源。
		      
		    2.消息的自描述性。在REST系统中所传递的消息需要能
		      够提供自身如何被处理的足够信息。例如该消息所使
		      用的MIME类型，是否可以被缓存等。
		      
		    3.资源的自描述性。一个REST系统所返回的资源需要能
		      够描述自身，并提供足够的用于操作该资源的信息，
		      如如何对资源进行添加，删除以及修改等操作。也就
		      是说，一个典型的REST服务不需要额外的文档对如何
		      操作资源进行说明。
		      
		    4.HATEOAS。即客户只可以通过服务端所返回各结果中所
		     包含的信息来得到下一步操作所需要的信息，如到底是
		     向哪个URL发送请求等。也就是说，一个典型的REST服务
		     不需要额外的文档标示通过哪些URL访问特定类型的资源，
		     而是通过服务端返回的响应来标示到底能在该资源上执行
		     什么样的操作。一个REST服务的客户端也不需要知道任何
		     有关哪里有什么样的资源这种信息。
		     对此原则总结如下：任何可能的情况下，使用链接指引可
		     以被标识的事物（资源）。
		     
		     参考：https://blog.csdn.net/adparking/article/details/52278794