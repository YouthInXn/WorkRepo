ES6 入门

			ES6是JavaScript语言的下一代标准

	1.ECMAScript和JavaScript的关系
			前者是后者的规格，后者是前者的一种实现
			另外的 ECMAScript 方言还有 Jscript 和 ActionScript。
			日常场合，这两个词是可以互换的。
	  --->Babel转码器:将ES6语法转换为ES5代码
	        1.在项目根目录下创建文件.babelrc(Babel的配置文件,运行时自动加载)，
	        该文件用来设置转码规则和插件
	        {
	          "presets":[
	              "latest",
	              "react",
	              "es2015"
	          ],
	          "plugins":[]
	        }
	       2. 安装转码规则集
	        //最新转码规则
	        npm  install --save-dev babel-preset-latest
	        //转jsx语法
	        npm install --save-dev babel-preset-react
	        //安装es5转换规则
	        npm install --save-dev babel-preset-es2015
	        将规则添加进配置文件中
	        
	       3.babel转码工具安装(安装在项目中)
	        //babel-cli模块是命令行转码工具
	        npm install --save-dev babel-cli 
	        //babel-register 模块改写require命令 require("babel-register");
	        npm install --save-dev babel-register
	        //babel-polyfill模块支持转新的API
	        //babel-core模块用于调用babel API转换某些代码
	        
	        改写package.json
	        "devDependencies":{
	          "babel-cli":"^vision",
	          "babel-register":"^vision"
	        },
	        "script":{
	          "build":"babel src -d lib"//加入这个脚本就可以执行npm run build
	        }
	        
			
	2.let和const

		   let声明局部变量
		   在代码块内用let声明一个变量之前不能使用
		   在块级作用域内声明函数时，不能用函数声明语句，用函数表达式
		   let f = function (){};
		   const声明不可变的局部变量，声明时必须赋值，而且不能被改变
		   
	3.变量的解构赋值
		  ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构
		  a.数组赋值
		  let [a,b,c]=[1,2,3];
		  b.对象赋值
		  let{foo,bar}={foo:"aaa" ,bar:"bbb"};
		  不一定要按照顺序排列，属性名能对上就行
		  如果变量名与属性名称不一样，必须写成下面的格式
		  let {foo:aoo} = {foo:"aaa"};
		  
		  -->赋值的内部机制是先找到同名属性，然后再赋值，被赋值的是后者foo.aoo="aaa";
		  
		  -->
		  数组的元素是按次序排列的，变量的取值由它的位置决定；
		  而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。
		  
    4.函数扩展
       rest参数:  ...变量名
       rest参数只能作为最后一个参数
       意为可以传入任意多个参数
       function foo(){}
       foo.name //foo  返回函数名
       foo.length //0  返回函数参数值(未声明默认值的参数数量)
       
       箭头函数:  var 函数名=(参数1，参数2...)=>{函数体}
       var f = a =>b;
       等同于: function f (a){return b;} 
       函数体内的this就是定义时所在的对象，不会指向全局变量
       普通函数体内的this指代调用者，是在运行时确定的
     
     5.数组扩展
       扩展运算符： ...[1,2,3,]   // 1,2,3
       可以用来复制数组
       const a1 = [1,2,3];
       const a2 = [...a1];
       Array.from();  将类似数组的对象转换为数组
       Array.of();      将一组值转换为数组
       数组去重的方法:
       Array.from(new Set([1,1,2,2,3,3])); // [1,2,3]
       数组的map()方法
       对数组的每个元素进行映射(一定操作)后，返回新的数组
       数组的filter()方法
       创建一个新的匹配过滤条件的数组
       
     6.Proxy
        给对象创建一个代理，做出一一些拦截或者操作
        
     7.Reflect
        操作对象提供的API
        
     8.Promise对象
        Promise是异步编程的一种解决方案。
        特点:1.有三种状态，且对象的状态不受外界影响
               pending（进行中）、fulfilled（已成功）、rejected（已失败）
             2.一旦状态改变就不会再变，任何时候都会得到这个结果resolved（已定型）	   
        函数:const promise = new Promise(function(resolve,reject){})
				  resolve()    将Promise对象的状态从“未完成”变为“成功”
                  reject()     将Promise对象的状态从“未完成”变为“失败”
                  方法要是带有参数，则参数会传递给回调函数
        回调函数：then(function(value){},function(error){});  
			        第一个参数代表成功的回调函数，value是resolve中的参数值
					第二个参数代表失败的回调函数，err是reject中传过来的参数
                    回调函数会在当前脚本执行完之后执行
			      catch(function(error){})
				    建议总是用catch来捕捉异常而不是then的第二个参数，因为catch也能捕捉
					Promise内部的运行时异常
					catch和then返回值都是新的Promise对象
			      finally函数：本质是then函数两种情况执行完都return
				  
				  all([p1,p2,p3])函数用于将多个Promise函数包装成一个Promise
				    1.只有数组中的Promise对象都执行resolve，此时才会调用外部Promise的then()
					2.有一个失败，外部Promise的状态就会失败，此时调用外部Promise的catch()
					3.当p1,p2,p3中如果自己定义了catch(),则它失败时不会调用外部Promise.catch()
				  race()：类似all函数，不过该方法是有一个率先变为成功，则Promise成功
				  Promise.resolve() 改变状态为成功
				  Promise.reject()  改变状态为失败
				  Promise中常用的捕获异常的处理办法
				    Promise.try().then().catch()
					try中的代码不知道是同步还是异步的时候也可以这样处理
	    -->该方法不支持babel转码，需要安装babel-polyfill，然后在脚本头部加入
		   import 'babel-polyfill';

     
     9.Generator函数：
	      该函数是异步编程解决方案，内部封装了多个状态。
		  返回值是一个遍历器对象。
		  写法与普通函数一样，只是在function后加上*，二是在函数内部使用yield(产出)表达式
	      该函数遇到yield表达式之后会暂停执行，当调用该函数的next方法时，指针移向下一个yield表
		  达式。
		  也就是说，generator函数是分段执行的，yield表达式是暂停的标记，next方法可以恢复执行
		  yield表达式只能用在generator函数中。
		  一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）
		  yield表达式。正常函数只能返回一个值，因为只能执行一次return；Generator 
		  函数可以返回一系列的值，因为可以有任意多个yield。从另一个角度看，也可以说 
		  Generator 生成了一系列的值，这也就是它的名称的来历（英语中，generator 
		  这个词是“生成器”的意思）。
     
     10.async函数(跟Generator函数一样)
          该函数就是Generator的语法糖。
		  就是将Generator中的*换成async,将yield换成await
		  该函数返回一个新的Promise对象
		  
		  async函数的错误处理：
		    1.如果async函数内部抛出错误，则返回的Promise对象会变为失败状态，会调用该对象的
			  catch()方法，参数也会传递过来
			2.只要一个await命令后面的Promise变为reject状态，则整个async函数就会中断执行，若希望
			  后面的代码继续执行，则需要给前一个await命令加上try..catch代码块，或者给其直接设置
			  catch处理异常。
			   try {
				await superagent.get('http://google.com/this-throws-an-error');
				break;
			   } catch(err) {}
			   }
			  当出现错误，break语句不会执行，会直接直接catch捕获异常。
			
		  async函数使用注意事项：
		    1.await命令最好都加上.catch()/try...catch
			2.若不是继发的关系，最好让异步函数同时触发。
			  触发方式有两种：
			  // 写法一
			  let [foo, bar] = await Promise.all([getFoo(), getBar()]);
			  

			  // 写法二
			  let fooPromise = getFoo();
			  let barPromise = getBar();
			  let foo = await fooPromise;
			  let bar = await barPromise;
			  
			3.并发读取顺序输出
			 async function logInOrder(urls) {
			  // 并发读取远程URL
			  const textPromises = urls.map(async url => {
				const response = await fetch(url);
				return response.text();
			  });

		     // 按次序输出
		     for (const textPromise of textPromises) {
			  console.log(await textPromise);
			   }
		  	 }
		 	  
     11.Class语法
          构造函数constructor(){}  在定义类的方法时，不需要加function关键字 
          实际上，类的所有方法都定义在类的prototype属性上面，
          Object.assign可以方便的向类中添加方法
          Class Point{}
          Object.assign(Point.prototype,{
             toString(){},
             toValue(){}
          });
          类必须使用new调用构造器来创建实例
      
     12.Module语法
          export命令
            1.输出变量
               export {a,b,c};
            2.输出函数
               export {f1 as fun1,f2 as fun2};
               export {f};/export function f(){};
               as关键字为了重命名函数
                           