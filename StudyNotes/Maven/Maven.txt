1.什么是Maven

   Maven是一款项目管理工具，是优秀的自动化构建工具，java开发框架

2.安装和配置

  首先正确安装JDK

  http://maven.apache.org/download.html下载bin压缩包
  
  添加环境变量M2_HOME  Maven的安装路径
  
  Path中添加%M2_HOME%\bin; 
  
  运行新的CMD,echo %M2_HOME%;   mvn -v;
  
3.与Eclipse集成 安装m2eclipse插件

  先把Eclipse自带的Maven配置完成，再下载m2e插件
  
  配置步骤如下:
  1.installtions 里选择add.. 把自己的Maven安装路径加入
  2.配置全局和用户范围的settings路径
  
  核心组件：

  打开Eclipse-->Help-->Install New Software..-->Add..
  Name:m2e
  location:http://m2eclipse.sonatype.org/sites/m2e  
  然后点击我同意许可 即可安装
  
  额外组件：
  
  同上方法
  location:http://m2eclipse.sonatype.org/sites/m2e-extras
  
  Maven SCM handler for Subclipse:从Subversion中迁出Maven项目的插件
  
  
4.HelloWorld

  新建一个maven项目 
              -->   Archetype 骨架，也就是文件夹的结构
                    一般普通项目选择quickstart，WEB项目选择webapp
              -->   quickstart文件骨架会在pom文件中自动配置junit的依赖 
                    JUnit是一个Java语言的单元测试框架。
  编写pom(定义了项目的基本信息)
  <groupId>包名(与公司关联com.supermap.helloworld)</groupId>
  <artifactId>在组中的唯一id(hello-world)</artifactId>
  在Elipse中新建Maven项目
  1.选择项目创建目录
  2.填写pom相关信息
  3.IDE自动创建符合Maven约定的文件夹
    在src/main/java 下放项目主代码，maven会自动搜寻该目录找到项目主代码
    主代码会被打包到最终的jar中，测试代码不会
    在主代码目录下新建包(包名应与groupId一致)
    在包下写HelloWorld.java主代码
  
  在项目主目录下执行 mvn clean compile
   
  执行步骤：1.清理target/目录下的文件  默认情况下构建的所有输出都在target/下
            2.执行resources
            3.将主代码编译至target/classes目录
            
5.编写测试代码

  测试代码目录src/test/java
  测试代码需要依赖单元测试标准JUit
  首先为HelloWorld项目添加依赖
  修改POM 
  <groupID>junit</groupId>
  <artifactId>junit</artifactId>
  <version>4.7</version>
  <scope>test</scope>  依赖范围：默认值为compile表示对主代码和测试代码都有效
  
  测试步骤：1.准备测试类及其数据
            2.执行要测试的行为
            3.检查结果
  注意:1.测试方法都以test开头  2.测试方法都要以@Test标注
  
6.打包和运行

  命令：mvn clean package
  jar包在target/目录
  mvn clean install 将jar包放入本地仓库
  
7.坐标

  坐标通过groupId,artifactId,version,packaging,classifier描述
  
  groupId:应定义到实际的项目，书写类似包名 com.supermap.helloworld
  artifacted:定义到实际项目中的一个Maven项目，helloworld-helloworld 
                                              项目名作为前缀
  version:定义当前所处版本
  packaging:定义打包规范 .jar  .war 
  
8.仓库

  自定义本地仓库地址：
  Maven有两个setting.xml文件，安装目录/conf下的是全局配置，
  Maven允许我们自定义配置setting.xml文件，因此我们可以将/conf下的setting.xml
  复制一份到Home/User/.m2，然后自定义配置，该配置只针对当前window用户
  如果两个setting文件同时存在的话，Home/User/.m2下面的setting设置会覆盖
  conf下的全局配置。
  
  编辑文件：.m2/settings.xml
  <settings>
  	<localRepository>url</localRepository>
  </settings>
  
  Maven仓库-->本地仓库
           -->远程仓库-->私服，中央仓库，其他库
  
  私服一般是在本地配置中央仓库镜像
  如果设置了<mirrorOf>*</mirrorOf>
  所有的下载请求都会转到镜像仓库的url
  也就免去了在Maven项目的POM中设置<repository>
  
  Maven仓库检索顺序：先在本地仓库中检索，再去远程仓库(镜像)中下载
  
9.仓库搜索服务

  Nexus:http://repository.sonatype.org (可假设私服)
  
10.生命周期与插件

   生命周期定义行为，插件做具体的实现
   
   三套生命周期:
   
      1.clean:清理项目，包含三个阶段
      2.default:核心部分
        包括编译主代码，测试资源文件，编译测试代码，打包为jar
        发布到本地仓库，部署到服务器等一系列任务。   
      3.site:建立和发布项目站点
  
  常用命令都是基于这些生命周期简单组合而成
  
  一个插件往往可以实现很多功能，每一个功能叫做插件目标
  maven-clean-plugin:clean
  clean插件的clean插件目标
  
  在核心的生命周期中已经内置绑定了相应的插件目标，当用户通过命令行
  调用生命周期阶段的时候，对应的插件目标就会执行任务。
 
11.Maven中的聚合

   当一个项目有很多模块需要同时构建时，就要用到聚合模块

   聚合模块本身是没有实质内容的，也就是其并没有src/main/java 
   或者src/test/java等目录，只有被聚合的模块子目录和pom.xml,
   这也是容易理解的，因为聚合模块仅是帮助聚合其他模块构建的工具。
   
   想要同时构建多个模块，首先需要创建一个聚合模块，
   该聚合模块要有自己的pom。
   
   聚合模块POM书写规则:
   
   1.packing: POM ,普通默认为jar，聚合模块必须指定为pom
   2.name:在构建时输出构建信息中显示的名字
   3.modules:核心配置，可以在打包方式为pom的Maven项目下
             声明任意数量个module元素来实现模块聚合。
     结构如下：(模块作为聚合模块的子目录)
     ---->modules-|- pom.xml
          		    |- moduleone
          		    |- moduletwo
     对应配置：
     <modules>
       <module>moduleone</module>
       <module>module2</module>
     </modules>
     
     结构如下：(平级)
     ---->|- modules
          |  |--pom.xml
          |- moduleone
          |- moduletwo
     对应配置：
     <modules>
       <module>../moduleone</module>
       <module>../module2</module>
     </modules>
     
12.Maven中的POM继承

  1.POM元素继承
  
    a.在聚合模块下新建父模块parent;打包类型packaging必须为pom
    父模块同聚合模块一样没有实际内容，只有pom.xml,
    因为其目的只是为了消除POM配置的重复。
    
    b.在子模块中写声明让其继承父模块
    <parent>
      <groupId>parent</groupId>
      <artifactId>parent</artifactId>
      <version>1.0</version>
      <relativePath>url</relativePath>
    </parent>
    relativePath是父Pom的相对路径。默认为../pom.xml
    子POM中不必再声明自己的groupId,version 因为已经隐式继承父POM中的元素
    
    c.将父模块添加到聚合模块中。
  
  2.依赖管理(dependencyManagement元素)
     
    a.在父POM中添加dependencyManagement(依赖管理)元素
      该元素能让子元素继承父模块的依赖配置，
      又能保证子模块依赖的灵活性
      <dependencyManagement>
       <dependencies>
         <dependency></dependency>
         <dependency></dependency>
         <dependency></dependency>
       </dependencies>
      </dependencyManagement>
      
    b.在子模块中也必须声明依赖的groupId,arctifactId
      否则该依赖不会被注入
    
    --->import依赖范围：将目标POM中的依赖管理配置范围导入。
                        <scope>import</scope>
                        指向打包类型为pom的模块

  3.插件管理(pluginManagement元素)
  
    a.在父元素中声明pluginManagement元素
    
    b.在子元素中声明所需要的插件groupId,artifactId
    
Maven的设计思想:约定优于配置

  在Maven中任何一个Maven项目都隐式继承了超级POM
  超级POM中的配置也就成了Maven项目POM的约定
  超级POM路径:MavenHome/lib/maven-model-builder.xxx.jar中
              org/apache/maven/model/pom-xxx.xml
              
  
13.反应堆

   构建顺序为先构建聚合模块，再构建父模块，最后构建单个模块
   
   裁剪反应堆构建项目命令参照Maven实战
    
14.建立nexus私服(Maven远程仓库)
   
   1>下载安装之后，配置环境变量
   2>安装：nexus.exe /install
     卸载：nexus.exe /unistall
     启动：nexus.exe /start
     停止：neuxs.exe /stop
       --->修改端口、IP:HOME/etc/nexus-default.properties
   3>浏览器访问http://localhost:8081
   4>配置maven使用私服:
     a.在settings.xml文件中添加元素profiles(用户仓库下的settings.xml)
     <profiles>
      <profile>
       <repositories>
        <repository>
          
        </repository>
       </repositories>
      </profile>
     </profiles>
     这样配置之后，maven会从该仓库中查找插件，如果没找到也会在中央仓库查找
     作用范围是本机的所有Maven项目
     b. 为了让Maven全部从Nexus中下载构件，需要配置镜像
     <mirrors>
      <mirror>
        <id>nexus</id>
        <mirrorOf>*</mirrorOf>//这里表示代理哪些仓库
        <url>仓库的地址</url>
      </mirror>
     </mirrors>
     c.开启对快照和发布版本的支持
     <profiles>
      <profile>
       <id>nexus</id>
       <repositories>
        <repository>
          <id>central</id>
          <url></url>//已经不重要，因为所有构建从镜像获取
          <releases>
           <enabled>true</enabled>//开启对发布版本的支持
          </reslases>
          <snapshots>
           <enabled>true</enabled>//开启对快照版本的支持
          </snapshots>
        </repository>
       </repositories>
      </profile>
     </profiles>
     d.//激活profiles
     <activeProfiles>
      <activeProfile>nexus</activeProfile>
     </activeProfiles>
    
    5>部署构件到nexus远程仓库
     
     a.在项目的pom中配置<distributionManagement>元素
      <distributionManagement>
      <!--配置发布版本的远程私服仓库-->
  		  <repository>
  		  	<id>myrepository-releases</id>
  		  	<name>MylocalRepository-releases</name>
  		  	<url>http://localhost:8081/repository/mylocalrepository/</url>
  	  	</repository>
  	  	<!--配置快照版本的远程私服仓库-->
      	<snapshotRepository>
  	  	    <id>myrepository-snapshot</id>
  	  	    <name>MylocalRepository-snapshot</name>
  		      <url>http://localhost:8081/repository/mylocalrepository-snapshot/</url>
  	    </snapshotRepository>
      </distributionManagement>
     b.在settings中配置server元素
     <servers>
  		<server>
  		<!--id要和POM中仓库Id一致-->
  			<id>myrepository-releases</id>
  			<username>admin</username>
  			<password>admin123</password>
  		</server>
 	    <server>
 	    	<id>myrepository-snapshot</id>
 	    	<username>admin</username>
 	    	<password>admin123</password>
 	    </server>
 	   </servers>
 	   c.执行命令:deploy,即可在远程仓库中查看部署的maven项目
	   
15.maven的常用命令

    mvn clean：清理target目录，这个目录包含编译的结果（class文件）
    mvn test：运行测试代码
    mvn compile：编译src/main/java下面的java代码，然后把编译结果放到target目录中
    mvn package：对项目进行打包，包中的内容没有src/test/java下面的java测试代码
