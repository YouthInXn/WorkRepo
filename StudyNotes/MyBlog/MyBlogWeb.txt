
 ---- 从零搭建自己的个人网站（前端篇） ----
 
 https://github.com/brickspert/blog/issues/1
 
 -项目环境搭建

	1.首先新建目录，使用npm init命令初始化一个package.json文件(一路enter)
	
	2.git init初始化git本地仓库，并关联远程仓库，如下配置.gitignore，暂时先排除 node_modules  dist目录
	
		/node_modules
		/dist
		
	3.建立public目录处理静态资源以及项目入口文件index.html和src目录
	
	4.安装webpack
	
		npm install --save-dev webpack@3.5.5
		npm install --save-dev webpack-cli
		
		安装webpack loader
		
		npm install --save-dev style-loader  
		npm install --save-dev css-loader	-用于打包解析样式文件
		// npm install --save-dev babel-loader
		
		基础配置:在项目根目录下建立webpack.config.js
		
		const path = require('path')
		
		module.export = {
			// webpack 入口
			entry:{
				main:path.resolve(__dirname, 'src/index.js')
			},
			// webpack 出口 打包的js文件输出位置
			output:{
				path:path.resolve(__dirname, 'dist'),
				filename:'bundle.js'  // 打包后名称问题？？
			}
		}
		
	5.安装babel转码器
	
		npm install --save-dev babel-core  -babel转码核心包
		npm install --save-dev babel-cli   -命令行转码工具，用于执行脚本
		npm install --save-dev babel-loader-用于webpack转换es6
		
		安装转码规则集
		
		npm install --save-dev babel-preset-es2015   -将es6转换为普通JS(babel-preset-es2015)
		npm install --save-dev babel-preset-react 	 -转换React的JSX语法
		npm install --save-dev babel-preset-stage-0  -用于解析 ES7 提案
		
		配置
		
		在项目根目录下建立.babelrc（window下建.babelrc. 自动变为.babelrc）
		{
			"presets":["es2015", "react", "stage-0"],
			"plugins":[]
		}
		
		修改webpack.config.js 增加babel-loader
		
		// 配置匹配.js文件，包括的目录是src下，用babel-loader转换  cacheDirctory=true缓存加速
		rules:[{
			test:/\.js$/,
			include:path.join(__dirname, 'src'),
			use:['babel-loader?cacheDirctory=true']
		}]
		
	6.React
	
		npm install --save react react-dom
		
	7.React-Router
	
		npm install --save react-router-dom (安装最新版，顺便学习一下)
		
		-react-router 和 react-router-dom的区别？
		
		在v4中，react-router导出核心组件和功能。 react-router-dom导出支持DOM的组件，如<Link>（呈现<a>）和<BrowserRouter>（与浏览器的window.history交互）。
		react-router-dom会重新导出所有react-router的导出，因此您只需要在项目中从react-router-dom导入。
	
	-eslint/editConfig工具
	
		全局安装eslint npm install -g eslint
		
		项目根目录下eslint --init  回答问题完成文件配置缩进选择2空格 换行默认建议删掉
		
		添加配置："parser": "babel-eslint",
		
		npm install --save-dev babel-eslint
		
		webStorm自带editConfig工具 配置参考React/eslint工具
		
	8.静态文件服务器&&HMR
	
		安装webpack-dev-server
		
		npm install webpack-dev-server@2 --save-dev

		webpack-dev-server 为你提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。
		
		+   devServer: {
		+     contentBase: './dist'
		+   },
		
		基本配置如上：告诉webpack-dev-server,在localhost:8080下建立服务，访问./dist下的文件
		
		更多的配置请参考官网。
		
		--模板html文件配置
		
			安装 html-webpack-plugins
			
			npm install --save-dev html-webpack-plugins
			
			使用：
			
			const webpackHtmlPlugins = require('html-webpack-plugins')
			module.exports = {
				plugins:[
					new WebpackHtmlPlugins({
						inject:true,
						...
					})
				]
			}
			
			title的设置要注意：启用自定义模板可以在html中直接设置，也可以在插件的options中，但是在html中要加入参数
			
			<title><%= htmlWebpackPlugin.options.title %></title>
			
			更多选项参考：https://github.com/jantimon/html-webpack-plugin#minification
			
		--热替换Hot Midule Replacement
		
			1.直接启用HMR
			
				-命令行
				
					package.json中增加修改命令如下
			
					webpack-dev-server --config webpack.dev.config.js --hot
					
					当使用CLI模式插件会自动被启用
					
					当模块更新的时候，通知index.js
					
					index.js中添加：
					
					if(module.hot) { module.hot.accept() }
				
				-webpack.config.js配置
				
					在devServer中加入：hot:true,
					plugins:中加入：new webpack.HotModuleReplacementPlugin()
					
				这两种方式都可以启用HMR.但是不要同时配置，他们是互斥的。
				
				
			2.通过NodeJS
			
				https://webpack.docschina.org/guides/hot-module-replacement
				
		--支持React
		
			为了使热加载的时候保留当前的state配置此模块
			
			安装：npm install --save-dev react-hot-loader@next
			
			配置：
			
				.babelrc:
				
					{
					  "presets": [
						"es2015",
						"react",
						"stage-0"
					  ],
					  "plugins": [
						"react-hot-loader/babel"
					  ]
					}
					
				webpack.dev.config.js入口增加react-hot-loader/patch
		
				修改入口文件
				
				/*初始化*/
				renderWithHotReload(getRouter());

				/*热更新*/
				if (module.hot) {
					module.hot.accept('./router/router', () => {
						const getRouter = require('./router/router').default;
						renderWithHotReload(getRouter());
					});
				}

				function renderWithHotReload(RootElement) {
					ReactDom.render(
						<AppContainer>
							{RootElement}
						</AppContainer>,
						document.getElementById('app')
					)
				}
						
		
	9.集成Redux（加入项目结构思考）
		
		1.安装
				
			npm install --save redux  
			npm install --save react-redux   (connect函数、bindActionCreators函数、 combineReducer函数等)
			
		2.实现一个Counter组件测试Redux / React-Redux
		
			在Router组件下新建Counter文件夹，并建立以下目录结构
			
			actions -- index.js
			reducers -- reducers.js
			components --counter.js	
			containers --counterContainers.js
			
			redux是状态管理机，react-redux中的connect函数，将redux管理的store中的state映射到组件上
		
			具体的写法可以参照Redux中文网https://www.redux.org.cn/
			
			写好Counter组件之后
			
			-将该组件用react-redux中的connect()函数包装，将容器组件加到路由上
			
			-在根路由中加入react-redux提供的Provider组件将store传递给所有的子路由
			
			-在rootReducers使用redux提供的辅助函数中加入Counter的子reducers，注意隐式参数传递
			
		3.中间件redux-thunk
		
			中间件允许我们dispatch一个函数作为action
			
			安装：npm install --save redux-thunk
			
			import {createStore, applyMiddleware} from 'redux';
			import thunkMiddleware from 'redux-thunk';
			import combineReducers from './reducers.js';

			let store = createStore(combineReducers, applyMiddleware(thunkMiddleware));

			export default store;
			
			简单的说，中间件就是action在到达reducer，先经过中间件处理。我们之前知道reducer能处理的action只有这样的{type:xxx}，所以我们使用中间件来处理
			函数形式的action，把他们转为标准的action给reducer。这是redux-thunk的作用。
		
	10.一些优化
	
		·reducers的拆分与合并(具体见项目中)
		
		·编译CSS
		
			npm install css-loader style-loader --save-dev
			
			webpack.config.js的rules中加入
			
			{
				test:'/\.css$/',
				use:['style-loader', 'css-loader']
			}
			
		·编译图片
		
			npm install --save-dev url-loader file-loader
			
			webpack.dev.config.js rules增加

			{
				test: /\.(png|jpg|gif)$/,
				use: [{
					loader: 'url-loader',
					options: {
						limit: 8192
					}
				}]
			}
	
		·按需加载
		
			1.以前的实现(参考webpack官方的代码分离实例)
		
				在React-Router4.0之前，实现代码分离核心的是require.ensure()/import()语法
				
				待学习：搭配reactRouter实现代码拆分&&按需加载
				
				http://react-china.org/t/webpack-react-router/10123
			
			2.现在官方修改了实现方式，使得代码分离更加容易
			
		·缓存
		
			为了确保 webpack 编译生成的文件能够被客户端缓存，而在文件内容变化后，能够请求到新的文件。
			
			1.修改输出文件的文件名
			
				每次构建生成不同的文件，告诉浏览器更新脚本
				
				在输出文件中加入hash值，使每次构建生成不同的文件
				
				-->入口文件命名：filename
				
					如果使用hash则加入的第三方vendor会在每次代码改变时修改hash(系统级的)
					
					因此filename只能用chunkhash命名
					
					但是chunkhash和webpack-dev-server-hot不兼容
					
					解决：
					
						
				
			2.提取模板
			
				·runtime bundle
			
					webpack 4以下的版本不能使用optimization
				
				·分离第三方代码
				
					webpack4之前这样配置：在插件中添加
					
					new webpack.optimize.CommonsChunkPlugin({ name:'vendor' })
					
					在入口中添加第三方模块入口
					
					vendor:['react', 'react-router-dom' ...]
				
				·减少第三方脚本的重复构建
				
					使用插件：
					
					new webpack.HashedModuleIdsPlugin()
					
					每次构建生成的vendor的hash值一致
					
					--> hash和chunkhash(个人理解)
					
						·hash是工程级别的，每次修改任何一个文件，hash都会变化
						
						·chunkhash根据不同的入口寻找依赖，为该依赖创建一个moduleID，在依赖内的文件没有发生变化时，chunkhash就不改变，分离了第三方库之后，使用chunkhash减少加载
						
		·文件压缩
		
			安装插件npm i --save-dev uglifyjs-webpack-plugin@1
			
			添加到plugins中
			
			注意版本问题！这个插件@2以上版本要求webpack为4.0以上版本！
			
			如果用webpack3 就安装@1
			
			为依赖的lib指定环境压缩第三方库
			
			new webpack.DefinePlugin({
				'process.env.NODE_ENV': JSON.stringify('production')
			})
		
			这两个加上可以明显减小bundle大小！
			
		·抽取CSS
		
			npm install --save-dev extract-text-webpack-plugin
			
			module: {
			rules: [
			  {
				test: /\.css$/,
				use: ExtractTextPlugin.extract({
				  fallback: "style-loader",
				  use: "css-loader"
				})
			  }
			]
			  },
			  plugins: [
				 new ExtractTextPlugin({
					 filename: '[name].[chunkhash].css',
					 allChunks: true
				 })
			  ]
			  
		·API请求优化(自定义MiddleWare优化Ajax异步请求，待研究 先用普通的方式开发)
		
			axios npm install --save axios
		
		·404页面
		
			将404组件放在Switch最后就可以，顺序匹配没有匹配到则404
			
		·添加babel配置
		
			先说一下，在webpack中使用babel,以下两种是一样的
			
				·在webpack.config.js中配置babel的插件和标准
				·使用独立的.babelrc文件
		
			1.babel-polyfill
			
				添加环境垫片，使开发可以使用最新的API，保证全局对象的方法转码
				
				npm install --save-dev babel-polyfill
				
				入口文件第一行添加 import 'babel-polyfill'
				
				webpack.config.js的入口数组中添加 'babel-polyfill'
				
			2.babel-plugin-transform-runtime
			
				不污染全局变量(??)
				
				把babel需要的转换函数_extends等 放到一个模块下，减少项目文件大小
				
				npm install --save-dev babel-plugin-transform-runtime
				
				.babelrc 插件中添加  "transform-runtime"
				
		
	11.暂时不需要的
	
		·postCSS插件
		
			为样式自动添加浏览器前缀(暂不需要)
			
		·模拟数据Mock
		
	12.UI框架选择
	
		·Fabric 
		·Grommet
		·React-toolbox
		·react-bootstrap
		·Blueprint
		·Ant-Design
		·Semantic-UI-React
		·React Desktop
		·Material-UI 就你了！
		。。。(头大)
		
--> 开发中的问题：

	1.Material-UI导致打的入口包非常大，如何按需加载？
	
		首先分离第三方Material-UI的代码库，在vendors中加入 dev依赖的UI库
		
		后续按需加载再处理。。
		
	2.个人头像加载不出来
	
		webpack-dev-server加载资源的路径是contentBase，因此需要手动将静态资源拷贝到dist目录下
		
		另外dev-server的publicPath可以配置URL直接可访问的静态资源 /public/ 只公开public下的文件
		
	3.dev-server每次热加载都要打包一次vendors,加载非常慢
		
		将压缩和处理第三方的运行环境的webpack插件提取到生产环境中去
		
		开发环境的出口名称改为[name].js，速度明显提升，虽然文件很大，但只在开发环境下
		
	4.消息和loading状态统一管理
	
		目前是写了一个组件，包含消息条和loading,该组件监听store中的变化，若状态改变，则进入loading/弹出消息条。
		
	5.登录如何持久化？
	
		cookie session koa-session的学习，再server笔记中记录
		
	6.当地址为localhost:3000/author/aboutme时，脚本请求地址变为localhost:3000/author/runtime.js导致404
	
		webpack配置中的output添加publicPath:'/' (绝对路径，只在host下请求脚本 ‘./’是相对路径，脚本随之变化)
			
				
	7.API请求优化
	
		1.自定义PromiseMiddleware，在个人博客中有保留
		
		2.使用redux-promise第三方库优化API请求
		
		源码：
		
			import { isFSA } from 'flux-standard-action';

			function isPromise(val) {
			  return val && typeof val.then === 'function';
			}
		
			export default function promiseMiddleware({ dispatch }) {
			  return next => action => {
			  // 判断是否为标准的flux action
				if (!isFSA(action)) {
				  return isPromise(action)
					? action.then(dispatch)
					: next(action);
				}

				return isPromise(action.payload)
				  ? action.payload.then(
					  result => dispatch({ ...action, payload: result }),
					  error => {
						dispatch({ ...action, payload: error, error: true });
						return Promise.reject(error);
					  }
					)
				  : next(action);
			  };
			}
		
		优化之后的action:
		
		const fetchData = (url, params) => fetch(url, params)
		async function getWeather(url, params) {
			const result = await fetchData(url, params)
			if (result.error) {
				return {
					type: 'GET_WEATHER_ERROR', error: result.error,
				}
			}
			return {
				type: 'GET_WEATHER_SUCCESS', payload: result,
			}
		}
		
		原理：
		
			来自阮老师的个人博客
			
			使用了该中间件以后，dispatch可以接受Promise作为参数，这时，ActionCreator有两种写法
			
			1.返回一个Promise,只有当promise成功时才会自动派发action,代码执行这里
			
			// 判断是否为标准的flux action
			if (!isFSA(action)) {
			  return isPromise(action)
				? action.then(dispatch)
				: next(action);
			}
			
			2.返回一个符合FSA的Action，但是其payload必须是一个promise,无论是否成功都会派发action
		
	8.FSA
	
		是一个命名flux action的标准
		
		http://www.ptbird.cn/flux-standard-action.html
		
	9.关于redux-thunk的思考，重新理解
	
		action.js中创建了一堆类似 const testAction = (args) => async (dispatch, getState) => { ... } 这样形式的ActionCreators,容器组件将其作为属性映射到组件上，可以理解为将函数的地址告诉了组件，但是并没有调用！
		
		在函数中，比如 componentDidMount() { this.props.testActionCreators(args)}
		这样调用，这时，redux-thunk就起作用了！
		
		1.首先经过redux-thunk中间件，将dispatch改造(具体见redux.txt --Redux thunk！)，使其可以接受一个函数为对象
		
		2.然后该函数this.props.testActionCreators(args)执行，其实也就是执行强化后的dispatch,具体做了两件事情，将(dispatch, getState, args)参数传递给action,调用该action!
		
	10.async函数的返回值
	
		若在 async 函数中 return 了一个值 x, 不管 x 值是什么类型, async 函数的实际返回值总是 Promise.resolve(x).
		
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
