1.JavaScript概述  Script:脚本
  1)-JS是嵌入HTML中在浏览器中的脚本语言 （没有编译器的语言）
    -一种网页编程技术
    -由浏览器解释执行，不需要预编译
    -JS和Java没有任何关系
  2)JS和Java的特点（面试必背）
    A.Java的特点
      面向对象：继承、多态、封装
    B.JS的特点
      基于对象：有对象，但不支持严格的继承、封装、多态
             -继承
              JS中没有继承的概念，但是它有原型的概念
              每个对象都有一个prototype属性，用来制定该对象的
              原型对象，类似于继承。（本质和继承很相似）
             -封装
              JS中有不严格的封装，对象中封装的属性和方法是可以
              任意访问、修改的。（公有的）
             -多态 
              JS中的所有对象都是Object，即他们的根原型是Object。
              但是JS不像Java的多态那样严谨，JS中的对象可以赋值给
              任意类型的其他对象。
  3）发展史
     Netscape2.0首先推出JS，命名参考了Java的名称
     现在由ECMA维护JS标准
  4）JS特点
     可以使用任何文本编辑工具编写
     浏览器内置的JS引擎执行代码
2.使用JavaScript
  1）第一个JavaScript
     --事件定义式  写在元素中 类似CSS的内联样式
     --嵌入式      在head里写<script>标签   类似CSS内部样式
     --文件调用式  在外部文件写.js文件 Html页面引用.js文件  类似CSS外部样式
  2）基础语法
     1）语法规范
        注释：单行//  多行 /* */
        语句：大小写敏感 分号或者换行结束语句
     2）标识符：不能以数字开头  
  3）变量
     -变量声明：var x,y;
                var count=0;
                没有初始化的变量自动取值为undefined;
     -->变量没有类型，引用的数据是有类型的
  4)数据类型
    a.特殊类型 null. 空  undefined 未定义
    b.内置对象 Number,String,Boolean,Function
    c.外部对象 window 浏览器对象 document 文档对象
    d.自定义对象 object 自定义对象
    -->隐式转换：数字+字符串=字符串
                 数字+布尔=数字+1 （true=1,flase=0）
                 字符串+布尔=字符串
                 布尔+布尔=数字（true=1,flase=0）
  5）数据类型转换函数
     toString():所有类型均可转换为String类型
     parseInt():强制转换为整数，如果转换失败，返回NaN(Not a number;)
              直接舍去小数位，不进行四舍五入；
     parseFloat():强制转换为浮点数,如果转换失败，返回NaN(Not a number;)
    *typeof()：判断某个数据是哪种类型；
     isNaN()：判断一个对象是不是一个数字；是数字返回false;
  6)运算符
    加、减、乘、除、余数、关系运算、三元运算符都和java一样
    -除法不同：java 5/2=2;   js  5/2=2.5;
    -js中多加了全等 ===  即数据类型相同，值也相同。
                    ==   数据类型不同，值相同。
                     =   赋值。
  7)流程控制
    1)分支语句 循环、for、while等都和Java一样
      -->区别：条件表达式可以是其他类型的任何值
      -->Js中的表达式----->一切表示空的数据都是false;
         a.布尔值:和Java的规则一样；
         b.其他值
           JS中可以以任何数据作为表达式：
           -如果是非空的数据，则代表true;
           -如果是(0/null/undefined/NaN/"")的数据，则代表false;
 *8)JS对象
      对象包含属性和方法。
      1）内置对象一
            ---String对象
            --创建String对象
              var str1="Hello";     
              var str2=new String("Hello"); 
            --常用属性和方法  
              str1.length;       常用length属性
              str2.toLowerCase();
              str1.toupperCase();  转大小写
              str1.charAt(index); 返回下标为index的字符；
              str1.charCodeAt(index); 返回对应下标的字母的ASCLL码
              “其实Java和JavaScript没有任何关系”.indexOf("Java");
                从0开始找Java的位置，返回下标。
               lastIndexOf("Java"); 从后向前找。
               str.substring(3,6);  截取并返回从第三个到第六个字符串
               "JavaSript".replace("Java","Hello"); 把Java换成Hello;
               str.split("b");  以b为分隔符，将元素放入数组  
             ---Number对象
               toFixed(num); 将num转换为字符串，同时保留一定的小数位
                3.1415926.toFixed(3);   -->3.142 (四舍五入，添0加位)
       2）内置对象二
             ---Array对象
             --创建数组
              var a1=new Array();  默认初始长度为0
              var a2=new Array(7);
              var a3=new Array(1,2,3);
              var a4=[1,2,3];
              a1.push(2); 将2添加到a1数组中
           --数组的倒转与排序
              a.reserse();  倒转
              a.sort();        排序
              -->如果需要倒序排序，重写copmare方法  
                     function compare(j,i){return i-j;}
                     a.sort(compare);  这样实现。
              -->排序的原理
               function sort(){
                var arr=[8,5,9,2,6,40]; 
                for(var i=0;i<arr.length;i++){
                   for(var j=i;j<arr.length;j++){
                      var r= compare(arr[j],arr[i]);
                     //r<0  互换顺序； r>=0  顺序不变
                     if(r<0){
                     var temp=arr[i];
                     arr[i]=arr[j];
                     arr[j]=temp;
                      }
                    }
                 } 
                compare(j,i){
                   return j-i;
                }
               }
               1)排序有两个要素
                  a.排序规则
                  b.比较方法
               2)排序规则 
                  sort方法的排序规则是预置的，且无法改变
                  只能按照从小到大的顺序来排序
                  即当两个数比较结果是负数时，将两个数换位
               3)比较方法
                  --JS预置的比较方法，默认返回两个数j,i相减的值
                  --排序规则就是基于这个返回值做出的排序
                  --该方法是可以置换的，修改返回值则会对排序规则产生影响
            ---Math对象     
                  Math.abs(x); 绝对值
                  Math.round(x); 取整     四舍五入 
           ---Date对象
                 var now=new Date();  当前日期
                 var time = new Date(2013-1-1 1:1:1);
             --常用方法
                 now.getTime();     返回毫秒数。
                 now.getDate();     返回这个月有多少天
                 now.toString();
                 now.toLocaleDateString();       返回本地日期
                 now.toLocaleTimeString();       返回本地时间
           ---RegExp正则对象
              var reg1=/\d{3}/;     定义一个三位数字的表达式
              var reg2= new RegExp("\d{3}"); 
              var reg3=/^\d{3,6}$/;  ^表示开始，&表示结束 定义一个完整的              3-6位数字的正则表达式
              var reg4=/Java/g; 定义一个全局的正则，匹配Java;
              reg2.exec(str);       从str中找出三位数字
              reg2.test(str);       判断str是否满足正则表达式 常用来做登陆验证
          ---Function对象
                function 函数名 （参数）{
                   函数体;
                   return ;  //默认返回undefined
                }
            --函数的参数:
                JS没有重载
                调用时只要函数名一样，无论传入多少参数，调用的都是同一个函数;(只看函数名字)
                 传参的时候，内部会把参数封装在一个arguments数组中，函数体内可以直接调用。
           --匿名函数
               var arr=[1,2,4,5,3,7,23]
               arr.sort(function(a,b){return a-b;});   
           --全局函数
              类似parseInt  isNaN  eval 
              -eval可以把一个字符串表达式当成算式计算。
                var s="2+3"; //输出2+3；
                eval(s); //输出5；
                用来实现计算器。
         3）外部对象
               1）关系
              -BOM浏览器对象模型  包括以下对象 （Browser Object Model）
               ---Window
                 --history     历史信息
                 --location   地址栏
                 --screen      窗口
                 --navigator 基本信息
                 --document 文档对象：页面的内容  （DOM）
                2）window 表示浏览器窗口
                     -常用方法(window.alert(); window可以省略)
                        alert();       普通对话框
                        comfirm(str); 确认对话框
                           显示字符串的内容
                           按确定返回true;取消返回false;
                     -定时器
                       网页动态时钟、制作倒计时、跑马灯效果
                       ・周期性定时器
                        每隔一段时间周期性执行函数
                        var id =  setInterval(执行语句,时间周期); //会返回ID
                        clearInterval(id);     停止定时器
                       ・一次性定时器
                        一定时间之后执行函数
 	                var id = setTimeout(执行函数，时间);
                        clearTimeout(id);
                      -screen属性
                        width/heigth
                        availWidth/availHeight   //屏幕可用宽高
                      -history属性
                        history.back();  后退一步
                        history.forward  前进一步
                        history.go(num);   +1 前进一步  -1后退一步
                      -location操作地址栏
                        location.href="http://www.hao123.com";  跳转到
                        location.reload();     刷新
                      -navigator 获取浏览器相关信息
                        navigator.userAgent;
                        类似点了关于FireFox;
                3)document对象  又名文档节点  文档对象  DOM 文档对象模型
                  html用来显示数据  存储在服务器上，运行在浏览器上    
                  浏览器将拿到的文档（页面）转换为DOM对象，再显示DOM对象
                  如何将文档转换为DOM呢？-- >创建DOM对象的时候，首先创建
                  DOM对象的根document，  再根据文档的内容去创建他的孩子。  
                  他下面的元素称为元素节点
                  文本成为文本节点
                  注释叫做注释节点
                  元素的属性叫做属性节点
                  --操作DOM对象
                  1）读取 、 修改节点
                     var t = document.getElementById("id");
                     t.nodeName;  获取节点名字
                     t.innerText;  获取节点内的文本
                     t.innerHTML;  获取包含标签的文本
                     t.getAttribute("width");        根据属性名获取属性值
                     t.setAttribute("width","30%");  根据属性名修改属性值
                     t.removeAttribute("width");     根据属性名移除该属性
                     t.className="";                 修改元素的类名
                     t.style.color="red";            修改元素的样式
                  2）查询节点
                     -通过ID  document.getElementByID("id"); 如果id错误 返回null；
                     -根据层次查询节点   
                       -parentNode:   找父节点
                       -childNodes:   找子节点  返回一个数组 包含了空格、换行
                       -getElementsByTagName("li");  直接找li的孩子 返回一个数组
                     -根据name属性查询节点
                      -document.getElementsByName("sex"); 返回name属性为sex的元素数组                        常用在表单中。                     
                  3）增加、删除节点
                     -增加节点
                   创建新节点：var a =document.creatElement("input") 一个游离态新节点
                   赋值：a.属性=""; 
                   将元素插入到某个元素下：element.appendChild(a);
                                           将节点a插入到element下，作为其最后一个孩子
                                           element.insertBefore(a，brother);
                                           将节点a插入到element下，作为其第一个孩子
                     -删除节点
                      nb.parentNode.removeChild(nb); 如果它有孩子 则一起移除
                 4）自定义对象
                    1）直接创建对象 用来封装几个数据
			function f1(){
	  			//创建对象 
    				var teacher = new Object();
	  			//创建属性 
	   			 teacher.name="苍老师";
	   			teacher.age=41;
	 			 //创建方法
	   			 teacher.work=function(){
	    				alert("苍老师老湿");
	   			 };
	  			//使用方法
	  			alert(teacher.name+","+teacher.age);
	  			teacher.work();
   			 }
                    2）使用构造器创建对象
			function f2(){
	  			//创建对象
	  			var s = new Student("Fanyuanjia",22);
	 			 //使用对象
	 			 alert(s.name+","+s.age);
	 			 s.work();
  			}
  			//预制一个带有格式要求的对象
  			function Student(name,age){
	 			 this.name=name;
	  			this.age=age;
	  			this.work=function(){
		 		alert("我学Java");
				  }
			  }
                    3）使用JSON创建对象 （JavaScriptObject Notation） 跨语言
                         var obj={
                          "name":"jerry",   var s={“键”：“值” ，“键”：“值”};
                          "age":29
                            };
                function f3(){
		  //创建对象
		 var programmer = {
		    "name":"Fanyuanjia",
	 	    "age":25,
	    	"work":function(){
	    	    alert(this.name+"写Java");
	   	    }
	 	};
		 alert(programmer.name+","+programmer.age);
		 programmer.work();
 		}
               5）事件
                  通过一个事件属性，可以在某个事件发生时对某个元素进行某种操作
                  --鼠标事件
                    onclick  单击
                    ondblclick  双击
                    onmousedown 按下
                    onmouseup   叹气
                    onmouseover 鼠标悬浮事件
                    onmouseout  鼠标离开事件
                  --键盘事件
                    onkeydown   按下
                    onkeyup     弹起
                  --状态事件
                    onload      页面加载时间
                    onchange    值改变事件
                    onfocus     光标切入事件
                    onblur      光标切换事件
                    onsubmit    表单提交事件
                  --取消事件
                    return false;
                 6)event对象
                   任何事件出发后将都会产生一个event对象
                   可以通过event获取事件相关信息
                   需要考虑兼容性
                   HTML代码中可以直接使用event <button onclick="f1(event)"></button>
                   JS中不可以  需要将event作为函数的参数 参数e接受传入的event
                   function f1(e){ 
                      alert(e.clientX+","+e.clientY);  //获取单击的位置
                   }
                   -->获取事件源
                    e.srcElement||e.target;
                 7)事件处理机制
                   多层元素嵌套时，内层元素事件被触发时，由里向外依次触发，冒泡机制。
                   默认存在
                   取消：1.event.stopPropagation();        
							阻止冒泡 当前元素的默认行为还是会执行
							比如点击链接，依然会打开该链接
						 2.event.preventDefault();
							阻止默认事件的方法，不会阻止冒泡
							链接不会打开
						 3.return false;
							以上两个都执行一遍
						 
						 
						 
						 
						 
						 