webpack  		https://webpack.docschina.org

I.概念

	1.什么是webpack？
	
		webpack是一个JS静态模块打包工具，它会根据依赖关系，生成一个或者多个bundle.js(bundle意为'包' )
		
		
	2.webpack核心概念
	
		a.入口(entry)
		
			入口起点指示应该使用哪个模块作为构建的起点。从这个文件出发，解决并寻找依赖
			
			默认值是./src/index.js
			
			可以自定义配置:webpack.config.js文件中配置entry属性
		
		b.输出(output)
		
			output属性告诉webpack在哪里输出它所创建的bundle.js,以及如何命名
			
			默认值是:  主文件: ./dist/main.js  其他文件:./dist
		
		c.loader
		
			loader可以让webpack处理非JS的文件，并且先将他们转换为有效的js模块，然后添加到依赖图中
			
			注意：loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，
			
			其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。
			
			“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”
			
		d.插件
		
			webpack插件可以让webpack执行更广的任务
			
			想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。
			
	3.具体概念
	
		
		a.entry
		
			单个入口写法：module.exports = { entry:'./src/index.js' } //适用于单个入口起点的应用
			
			对象语法：module.exports = { entry:{
				pageOne:'./src/pageOne.js',
				pageTwo:'./src/pageTwo.js',
				pageThree:'./src/pageThree.js'
			} }      //高度可扩展性

		b.output
			
			最基础的配置 
			
				module.exports = {
					output:{
						filename:'bundle.js',
						path:'/home/src/dist'
					}
				}
				
			多个入口配置
			
				module.exports = {
					output: {
						filename:[name].js,
						path:__dirname + './dist'
					}
				}  //name 是input中配置的文件名pageOne/pageTwo等，__dirname是...???
				
		c.mode
		
			mode选项告知webpack启用对应的优化插件
			
			mode:'devlopment' //开发模式 process.env.NODE_ENV 的值设为 development
			
			mode:'production' //默认值， process.env.NODE_ENV 的值设为 production
			
			mode:'none'       //不启用优化插件
			
		d.loader
			
			用于对源代码进行转换
			
			npm安装对应的loader插件，并且在webpack中配置
			
			module.exports = {
				module:{
					rules:[
						{test:/\.css$/, use:'css-loader'}  // 匹配.css文件，使用css-loader
					]
				}
			}
