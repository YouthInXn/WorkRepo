webpack  		https://webpack.docschina.org

I.概念

	1.什么是webpack？
	
		webpack是一个JS静态模块打包工具，它会根据依赖关系，生成一个或者多个bundle.js(bundle意为'包' )
		
		
	2.webpack核心概念
	
		a.入口(entry)
		
			入口起点指示应该使用哪个模块作为构建的起点。从这个文件出发，解决并寻找依赖
			
			默认值是./src/index.js
			
			可以自定义配置:webpack.config.js文件中配置entry属性
		
		b.输出(output)
		
			output属性告诉webpack在哪里输出它所创建的bundle.js,以及如何命名
			
			默认值是:  主文件: ./dist/main.js  其他文件:./dist
		
		c.loader
		
			loader可以让webpack处理非JS的文件，并且先将他们转换为有效的js模块，然后添加到依赖图中
			
			注意：loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，
			
			其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。
			
			“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”
			
		d.插件
		
			webpack插件可以让webpack执行更广的任务
			
			想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。
			
	3.具体概念
	
		
		a.entry
		
			单个入口写法：module.exports = { entry:'./src/index.js' } //适用于单个入口起点的应用
			
			对象语法：module.exports = { entry:{
				pageOne:'./src/pageOne.js',
				pageTwo:'./src/pageTwo.js',
				pageThree:'./src/pageThree.js'
			} }      //高度可扩展性

		b.output
			
			最基础的配置 
			
				module.exports = {
					output:{
						filename:'bundle.js',
						path:'/home/src/dist'
					}
				}
				
			多个入口配置
			
				module.exports = {
					output: {
						filename:[name].js,
						path:__dirname + './dist'
					}
				}  //name 是input中配置的文件名pageOne/pageTwo等，__dirname是...???
				
		c.mode
		
			mode选项告知webpack启用对应的优化插件
			
			mode:'devlopment' //开发模式 process.env.NODE_ENV 的值设为 development
			
			mode:'production' //默认值， process.env.NODE_ENV 的值设为 production
			
			mode:'none'       //不启用优化插件
			
		d.loader
			
			用于对源代码进行转换
			
			npm安装对应的loader插件，并且在webpack中配置
			
			module.exports = {
				module:{
					rules:[
						{test:/\.css$/, use:'css-loader'}  // 匹配.css文件，使用css-loader
					]
				}
			}
			
II. 实战

	根据webpack官方教学一步一步学习使用webpack.
	
	这里记录我所遇到的问题
	
	·npx命令：(Node 8.2/npm 5.2.0 以上版本)
	
		一次性命令执行工具，自动帮你执行依赖包中的二进制文件(bin 命令)
		
		npx webpack
		
		该命令会自动查找当前依赖包webpack中的可执行文件，如果找不到，就去系统中的path找，
		
		如果依然找不到就帮你一次性安装并执行
		
	·webpack对import  export命令的处理
	
		内部打包自动转换为兼容各大浏览器的语法！
		
		使用webpack该命令可以直接使用!
		
	·技巧：
	
		"build":"webpack",
		
		npm run build -- --colors 该命令会传递给webpack
	
		查看webpack引入的css文件，应该使用检查，而不是查看网页源代码
		
	·管理输出
	
		html-webpack-plugin:自动帮你生成html模板文件到dist下(模板配置参考官网API)
		html-webpack-template:额外的功能
		clean-webpack-plugin:每次构建自动清理dist文件夹 ==》new CleanWebpakPlugin(['dist'])
		
	·开发
	
		源码映射：
		
		source-map:源码映射 更多配置选项参考官网 简单采用 inline-source-map
		
		自动编译：
			
			webpack's Watch Mode：观察者模式，每次更新自动编译，但是需要手动刷新浏览器
			webpack-dev-server(最常用)
			webpack-dev-middleware:(需要搭配express/KOA)待研究
			
	·tree-shaking
	
		用于移除上下文中未使用到的代码。
		
		当一个模块多次导出，但是只有一个导出被引用的时候，其余导出便成为了无用代码。
		
		tree-shaking就是干这个的，删掉无用代码，在webpack中配置参考官方教学
		
	·生产环境构建(基础)
		
		使用webpack-merge小工具实现不同环境下的配置分离
		
		安装 npm install --save-dev webpack-merge
		
		配置分离为三个文件
		
			-webpack.common.js,
			-webpack.dev.js,
			-webpack.prod.js
			
	·代码分离
	
		1.入口分离 + 防止重复
		
		2.动态导入 
		
			1.import()语法
			
				使用async await异步导入模块
				
				await import(
				//  通过注释控制模块名称等
				/* webpackChunkName:"lodash_test" */
				// 路径
				'lodash'
				);
				
				注意当调用 ES6 模块的 import() 方法（引入模块）时，必须指向模块的 .default 值，因为它才是 promise 被处理后返回的实际的 module 对象。
				
				各种框架都是基于Webpack import()语法实现的代码拆分
				
				-->React中的代码拆分查看React官网，笔记在React-代码拆分部分
			
			2.require.ensure(); 过时了
			
		3.缓存
		
			浏览器的缓存技术会使得代码更新出现问题。
			
			通过必要的配置，以确保 webpack
			编译生成的文件能够被客户端缓存
			而在文件内容变化后，能够请求到新的文件。
			
			·输出文件的文件名修改
			
			  filename:'[name].[chunkhash].js'
			  
			·HashedModuleIdsPlugin
			
				该插件保证第三方依赖不会被多次打包构建，加快构建速度
				
		4.离线体验
			
			
			
		
		
		
	
		
	
	
