Redux

Redux 是 JavaScript 状态容器，提供可预测化的状态管理。

1.安装

  npm install --save redux;
  //react绑定库
  npm install --save react-redux
  
2.核心概念

  1>action
    发起action来更新state 
    eg:{type:'ADD_TODO',text:'Eat Food'}
    action就像是描述发生了什么的指示器
    action本质上是JS的普通对象
    约定：
      action内必须使用一个字符串类型的type字段来表示将要执行的动作
      index字段用来标识唯一ID
      尽量减少在action中传递的数据
    -action创建函数
     就是生成action的方法
      
  2>reducer
    reducer只是一个接收旧的state和action，并返回新的state的函数
    注意：
      不要修改原来的state,使用函数Object.assign({},state,{});这个函数会将state
      对象复制一份放入目标函数{}中，然后将第三个参数{}属性合并到第一个参数中
      重名的属性会被第三个参数中的覆盖
      原来的state不变，返回的新对象中会有改变
    每次返回state对象的时候要把它包装成新的state对象才能被渲染
    reducer的合成
    function todoApp(state={},action){
     return {
     //交给对应的函数去处理
       todos:todos(state.todos,action);
       id:id(state.id,action);
     };
    }
    另外reducer提供了工具类combineReducer();
    使用时先导入
    import {combineReducer} from 'redux';
    const todoApp = combineReducer({
    //这里写return里的函数名 参数默认
       todos,
       id
    });
    与上面的写法完全相同
    可以省略是因为函数名与属性名相同，若不相同要这样写
    a:todos,
    b:id
    
  3>Store
    store用来联系action和reducer它有以下功能
   	 	 1.维持应用的state
   		 2.提供getState()方法获取状态
   		 3.提供dispatch(action)方法更新state
   		 4.通过subscribe(listener)方法注册监听器
   		 5.通过subscribe(listener)返回的函数注销监听器
    一个redux应用应该只有一个store
    1.根据reducer创建store
    首先import {createStore} from 'redux',
    let store = createStore(todoApp);
    该方法第二个参数是可选的，用于设置state的初始状态 
    网络接收到的服务器端的state:window.STATE_FROM_SERVER
    2.发起Action
    store.dispatch(addTodo('learn'));
    
  4>数据流
    数据的生命周期遵循四个步骤：
    1.调用store.dispatch(action);
	  store.dispatch可以在任何地方调用
	  
    2.Redux store 调用传入的reducer函数;
	  在创建store的时候要求传入reducer, store会把两个参数(当前的state和action)传入reducer
	  reducer根据参数执行conbinerudecer方法返回一个新的状态(nextTodos,newTodoOptions)

    3.根reducer把多个子reducer输出合并成一个单一的state树;
	  let newState = {newTodos,newTodoOptions}
	  
    4.Redux store保存了根reducer返回的完整state树。
      所有订阅store.subscript(listener)的监听器都将被调用
	  在监听器中可以使用store.getState方法获取当前状态
	  
  5>搭配React
    Redux 和 React 之间没有关系;
    Redux默认不包括React redux绑定库，需要安装
    npm install --save react-redux
    
    Redux的React绑定库是基于容器组件和展示组件相分离的开发思想
    实现容器组件建议使用React Redux库中的connect()方法来生成
    connect()方法有常用的俩个参数
	   ->mapStateToProps(state, ownProps) 
	     允许我们将store中的数据作为props绑定到组件中
	     只要store更新了就会调用mapStateToProps方法
	   ->mapDispatchToProps(dispatch,ownProps)
	     允许我们将action作为props绑定到组件中,分发action
		 
3.Redux高级技巧

	改天组织

		 
Redux-thunk

https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559

1.安装和使用

安装:npm install redux-thunk --save-dev
导入thunk： import thunk from 'redux-thunk'
导入中间件: import {createStore,applyMiddleware} from 'redux'
创建store：let store = createStore(reducer函数，applyMiddleware(thunk))
激活redux-thunk中间件，只需要在createStore中加入applyMiddleware(thunk)就可以
    
2.理解定义：

为了寻找一种方法合理的提供dispatch帮助函数的方式，
为了让Redux看到异步Action-Creator作为正常动作创建者的特例而不是完全不同的函数
而出现了thunk中间件

3.thunk的理解和使用

可以让dispatch函数识别异步的Action,并且参数可以识别函数

  store.dispatch(function (dispatch) {
  // ... which themselves may dispatch many times
  dispatch({ type: 'INCREMENT' })
  dispatch({ type: 'INCREMENT' })
  dispatch({ type: 'INCREMENT' })

  setTimeout(() => {
    // ... even asynchronously!
    dispatch({ type: 'DECREMENT' })
  }, 1000)
  })

//这里将一个异步函数作为dispatch的参数，thunk会将其dispatch作为参数去执行该函数
//reducer还是会接收到正常的参数，在thunk内部实现
//thunk允许我们声明异步操作Action为常规的Action

// actions.js
function showNotification(id, text) {
  return { type: 'SHOW_NOTIFICATION', id, text }
}
function hideNotification(id) {
  return { type: 'HIDE_NOTIFICATION', id }
}

let nextNotificationId = 0
export function showNotificationWithTimeout(text) {
  return function (dispatch) {
    const id = nextNotificationId++
    dispatch(showNotification(id, text))

    setTimeout(() => {
      dispatch(hideNotification(id))
    }, 5000)
  }
}

//showNotificationWithTimeout在内部返回一个Action创建函数，也就是一个thunk动作创建者。
//外层的函数不需要接收dispatch作为参数，接下来使用该thunk中间件

showNotificationWithTimeout('You just logged in.')(this.props.dispatch)

//该方法返回一个dispatch函数，后面的括号里直接继续作为它的参数
//但是不建议这样写，因为该中间件允许dispatch识别函数，因此可以这样写
//如果启用了ReduxThunk中间件，则只要您尝试传入函数而不是操作对象，中间件就会使用dispatch方法本
//身作为第一个参数调用该函数。

this.props.dispatch(showNotificationWithTimeout('You just logged in'))

//showNotificationWithTimeout这个方法返回一个需要dispatch作为参数的函数，外面的
//this.props.dispatch则会作为返回的函数的第一个参数，然后调用该函数！


    
    
