1.动态生成具有层级关系的DOM节点

  a.遇到的问题
  
    服务器返回的数据如下
    {
      "data":[
      {"code":"510000","name":"四川省","remarks":"","superCode":"500000","unitLevel":1},
      {"code":"511000","name":"内江市","remarks":"","superCode":"510000","unitLevel":2},
      {"code":"511001","name":"市辖区","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511002","name":"市中区","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511011","name":"东兴区","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511024","name":"威远县","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511025","name":"资中县","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511028","name":"隆昌县","remarks":"","superCode":"511000","unitLevel":3}
    ],
   "isSuccessed":true,
   "message":"读取行政区结构成功"}
   要将它按照层级关系渲染到树上
   
  b.解决
    
	找到跟节点，将其余的节点都作为它的children
	参数传递(data,'code','superCode','pidv')
	pidv从数据中筛选出最小的utilLevel,取得该对象的superCode的value
	
	const recursion = (array, id, pid, pidv) => {
    if (!Array.isArray(array)) {
      return array
    }
    let data = array.map(a => ({ ...a }))
	//根据pidv找到根节点
    let tempArr = data.filter(a => a[pid] === pidv)
    tempArr.forEach(a => {
	//注意这里传入的是a[id] 也就是作为下一次函数执行的pidv去匹配自己的子元素
      a.children = recursion(data, id, pid, a[id])
      a.children = a.children.length > 0 ? a.children : null
      return a
    })
    return tempArr
    }
	
	这样处理后数据变成了
	children里的每个元素都有了children属性
	{
      "data":[
      {"code":"510000","name":"四川省","remarks":"","superCode":"500000","unitLevel":1,
	  children:[......]
	  },
	  "isSuccessed":true,
	  "message":"读取行政区结构成功"
	}
	
	然后在渲染的时候递归处理
	
	<Tree>
	 {loop(data)}
	</Tree>
	
	const loop = date =>{
		data.map(
		  (item)=>{
		    if (item.children && item.children.length) {
				return <TreeNode key={item.key} 
				  title={item.title}>{loop(item.children)}</TreeNode>;
			}
			return <TreeNode key={item.key} title={item.title} />;
		  }
		)
	}
	
2.实现Loading页面，加载完成之后展示加载成功，两秒自动关闭

	a.遇到的问题：本意是想在loading为false之后设置定时器，两秒关闭
	
		结果loading默认为false，定时器每次都会执行，导致modal的visible不停地被置为false,render方法重复执行
		
		若在执行结束前操作，则会导致错误。(如果点的快，置为true之后loading,结果遇到某定时器结束，又给关掉了)
	
	b.解决
	
		思路：不能每次都设置定时器，只有在加载完毕以后，再设置定时器，
		
			于是给组件加了一个loadOver的属性，当加载完毕以后，就使loadOver为true，在组件内部
			
			做判断
			if (nextProps.loadOver) {
				if (nextProps.loadOver === this.props.loadOver) {
					console.log(`${nextProps.loadOver},${this.props.loadOver}`)
					return
				 }
				setTimeout(() => {
					this.setState({ visible:nextProps.loading })
				}, 2000)
			}
			但是依然有个问题：当loadOver变为true之后，切换其他组件，该状态会被带过去，从而重新加载，导致多个定时器被启动。
			
			因此再加上判断：
			
			if (nextProps.loadOver === this.props.loadOver) {
				return
			}
			
			问题解决。
			
			补充：后来发现其实问题根源在于当你切换其他组件时，状态会被重新加载，导致定了多个定时器。
			
			代码：
			
			componentWillReceiveProps (nextProps) {
				if (nextProps.msg === '') {
				  return
				}
				if (nextProps.loading) {
				  this.setState({ visible:nextProps.loading })
				} else {
				  if (this.props.loading === nextProps.loading) {
					return
				  }
				  setTimeout(() => {
					this.setState({ visible:nextProps.loading })
				  }, 1000)
				}
			}
			
	c.扩展：loading组件实现为一个可复用的对象，而不是一个可复用的组件
	
3.OPTION请求

	a.问题
	
		对接iportal上的POST接口时，在接口模拟上可以访问，在项目中，只会发送一个OPTION请求返回200，然后结束。
		
	b.解决
	
		iPortal端检查Access-Control-Request-Headers字段以后，确认允许跨源请求做出了200状态码回应，但是在
		
		response消息头中丢失了字段Access-Control-Allow-Headers:content-type
		
		导致浏览器报错
		
		Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.
	
	c.学习
	
		1.什么是跨域？ 
		
		   默认AJAX会遵守同源策略，JS脚本只能访问相同协议/相同主机名/相同端口的资源（http://localhost:3000），如果
		   
		   要突破这个限制，那就是所谓的跨域。此时需要遵守CORS（Cross-Origin Resource Share）机制。
		   
		   跨域的三种解决方案：
		   
		   1.JSONP：HTML中的script标签，就是使用这种模式，GET请求

		   2.代理：调用同源接口去访问跨域资源 
		   
		   3.SERVER端支持CORS
		   
		2.什么是CORS（跨域资源共享）？
		
			CORS是一个W3C标准，是一种使用额外HTTP标头来让目前浏览网站的useragent
			能获得访问不同来源（网域）服务器特定资源之权限的机制。当useragent
			请求一个不是目前文件来源——来自于不同网域（domain）、通信协定（protocol）
			或通信端口（port）的资源时，会建立一个跨来源HTTP请求（cross-origin HTTP request）。
			
			普通的AJAXapi都遵守同源策略，若访问跨域资源，则必须使用CORS消息头。
			当用fetch/XMLHttpRequest等API进行跨站请求时，会默认使用CORS消息头。
			
			CORS需要浏览器和服务端同时支持。当前浏览器端基本都支持，IE10以上支持。
			
			CORS通信过程不需要用户参与。对于开发者而言，代码也是完全一样，浏览器一旦发现HTTP请求
			跨域，则会自动附加一些头信息，当为复杂跨域问题时，还会多发出一次请求（OPTION），但是用户不会感知。
			
		3.两种跨域请求
		
			1.简单跨域请求
			
				同时满足以下条件，则为简单请求（通常涉及到1,2）
				
					-请求方法是以下方法之一：GET/POST/PUT
				
					-头信息不超过以下几种字段：Accept | Accept-Language | Content-Language | Last-Event-ID
				
						Conten-Type:只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain
						
						注意：这里其实是限制传递的数据类型，第一个为字符串，第二个为表单，第三个为文本，
						
							若为这三种格式的数据，则都是简单跨域请求，所以归根结底，区分简单和复杂请求
							
							是传递数据的类型。
				
					-请求中没有 ReadableStream 类型的内容被用于上传。
				
					-没有事件监听器被注册到任何用来发出请求的 XMLHttpRequestUpload 上（经由 XMLHttpRequest.upload 
					方法取得）上。
				 
				浏览器发现自己发送的是简单请求，则只会发送一次HTTP请求。
				
				相对非跨域请求，浏览器自动会在请求头中额外添加Origin字段
				
				如果Origin指定的域名在服务端的许可范围内，服务端返回的响应会多出以下字段
				
				Access-Control-Allow-Origin: http://api.bob.com （*表示开放服务器）
				Access-Control-Allow-Credentials: true
				Access-Control-Expose-Headers: FooBar
				Content-Type: application/xml
				
				如果Origin指定的域名不在服务端的许可范围内，则返回一个正常的HTTP响应。
				
				然后浏览器发现response的头信息中没有Access-Control-Allow-Origin字段，则会抛出错误。
				
				且该错误不能被状态码识别。
				
			2.复杂跨域请求(预检请求)
				
				不满足简单跨域请求的条件，则为复杂跨域请求。
				
				复杂的CORS请求，在正式通信之前，增加一次HTTP请求，称为预检请求：Preflight
				
				预检请求会先使用HTTP的OPTIONS方法请求另外一个域名资源，确认后续实际是否能安全送出。
				
				服务端收到预检请求之后，检查Headers中的Origin/Access-Control-Request-Method/Access-Control-Request-Headers
				
				字段以后，确认允许跨源请求，就可以做出回应（200），若否定了该请求，返回正常的HTTP回应，但是没有
				
				任何的CORS字段，此时浏览器会认为服务端不同意预检请求，抛出错误，被XMLHttpRequest的回调onError捕获。
				
				一旦预检通过，每次CORS请求都会变成简单跨域请求。
				
				Access-Control-Max-Age用来指定本次预检请求的有效时间，86400是24小时也就是一天。
				
				
			3.CORS字段
			
				参考阮老师的网络日志：http://www.ruanyifeng.com/blog/2016/04/cors.html
				
				本笔记更多参考于：https://blog.csdn.net/qq_15437667/article/details/78841335?utm_source=blogxgwz2
				
4.SessionStorage(会话存储)(待完善)

	1.问题
	
		使用state给某组件传递参数，如何再次访问该路由(带参数加载的)？
	
	2.解决
	
		a.离开前确认，不再允许进入存储的路由(不合理)
		
		b.重定向：sessionStorage中有值的话，重定向到最后一个state的路由。(未能实现)
		
		c.直接操作sessionStorage
		
			权限组件入口检测如果sessionStorage中存有Role，则显示管理界面
	
	3.学习
	
		1.什么是SessionStorage？
		
			SessionStorage是HTML5新增的一个会话存储对象，用于临时保存同一窗口的数据，关闭之后会清空。
			
		2.API参考
		
			https://www.cnblogs.com/polk6/p/5512979.html
			
5.JS对象复制的坑

	1.问题
	
		状态中存储了这样的数据结构：this.state.years = [{status:9, year:2018}, {status:9, year:2019}]
		
		为了不直接修改state这样去改
		
		const years = [...this.state.years].map(i => ...)
		
		结果原来的state还是直接被修改了
		
	2.解决
	
		[ ...this.state.years ]在被babel编译之后变成了 concat([], this.state.years)
		
		这里注意，[...this.state.years]和this.state.years确实是不相等的，数组的地址发生了变化
		
		但是里面的元素确是指向拷贝之前的源数组，因此当你操作数组元素的时候，源数组会发生变化
		
		刚开始以为是concat的拷贝问题，用Object.assign([], this.state.years)也是一样的
		
		所以结论是：
		 
		数组拷贝都只是浅拷贝，只新建一个数组的地址，里面的元素都是指向源数组的（当数组中的元素不是基本类型的时候）
		
		一个全是基本类型的数组不存在这种问题let a = [1,2,3] [...a][0] = 4  a还是原来的值
		
		两种解决方案：
		
			1.数组深层拷贝(可以用for循环)
			
			2.拷贝数组中的每个对象
			
			const years = this.state.years.map(i => {
				let i_copy = { ...i }
				// 操作i_copy不会影响源数组
			})
			
	3.扩展
	
		对象和数组一样，...语法只能拷贝当前层级的地址(浅拷贝)，举个栗子
		
		let t = { a：{ b:1 } }
		
		let t_copy = { ...t }
		
		t_copy.a.b = 2
		
		t  // { a: { b:2 } } 
		
		虽然t_copy和t整体两个对象指向不同的地址 但是{b:1}都是指向同一个地址
		
		
		
		
		
		
		
		
		
		
		
		
	
	