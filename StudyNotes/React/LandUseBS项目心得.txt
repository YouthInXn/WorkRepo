1.动态生成具有层级关系的DOM节点

  a.遇到的问题
  
    服务器返回的数据如下
    {
      "data":[
      {"code":"510000","name":"四川省","remarks":"","superCode":"500000","unitLevel":1},
      {"code":"511000","name":"内江市","remarks":"","superCode":"510000","unitLevel":2},
      {"code":"511001","name":"市辖区","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511002","name":"市中区","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511011","name":"东兴区","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511024","name":"威远县","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511025","name":"资中县","remarks":"","superCode":"511000","unitLevel":3},
      {"code":"511028","name":"隆昌县","remarks":"","superCode":"511000","unitLevel":3}
    ],
   "isSuccessed":true,
   "message":"读取行政区结构成功"}
   要将它按照层级关系渲染到树上
   
  b.解决
    
	找到跟节点，将其余的节点都作为它的children
	参数传递(data,'code','superCode','pidv')
	pidv从数据中筛选出最小的utilLevel,取得该对象的superCode的value
	
	const recursion = (array, id, pid, pidv) => {
    if (!Array.isArray(array)) {
      return array
    }
    let data = array.map(a => ({ ...a }))
	//根据pidv找到根节点
    let tempArr = data.filter(a => a[pid] === pidv)
    tempArr.forEach(a => {
	//注意这里传入的是a[id] 也就是作为下一次函数执行的pidv去匹配自己的子元素
      a.children = recursion(data, id, pid, a[id])
      a.children = a.children.length > 0 ? a.children : null
      return a
    })
    return tempArr
    }
	
	这样处理后数据变成了
	children里的每个元素都有了children属性
	{
      "data":[
      {"code":"510000","name":"四川省","remarks":"","superCode":"500000","unitLevel":1,
	  children:[......]
	  },
	  "isSuccessed":true,
	  "message":"读取行政区结构成功"
	}
	
	然后在渲染的时候递归处理
	
	<Tree>
	 {loop(data)}
	</Tree>
	
	const loop = date =>{
		data.map(
		  (item)=>{
		    if (item.children && item.children.length) {
				return <TreeNode key={item.key} 
				  title={item.title}>{loop(item.children)}</TreeNode>;
			}
			return <TreeNode key={item.key} title={item.title} />;
		  }
		)
	}
	
2.实现Loading页面，加载完成之后展示加载成功，两秒自动关闭

	a.遇到的问题：本意是想在loading为false之后设置定时器，两秒关闭
	
		结果loading默认为false，定时器每次都会执行，导致modal的visible不停地被置为false,render方法重复执行
		
		若在执行结束前操作，则会导致错误。(如果点的快，置为true之后loading,结果遇到某定时器结束，又给关掉了)
	
	b.解决
	
		思路：不能每次都设置定时器，只有在加载完毕以后，再设置定时器，
		
			于是给组件加了一个loadOver的属性，当加载完毕以后，就使loadOver为true，在组件内部
			
			做判断
			if (nextProps.loadOver) {
				if (nextProps.loadOver === this.props.loadOver) {
					console.log(`${nextProps.loadOver},${this.props.loadOver}`)
					return
				 }
				setTimeout(() => {
					this.setState({ visible:nextProps.loading })
				}, 2000)
			}
			但是依然有个问题：当loadOver变为true之后，切换其他组件，该状态会被带过去，从而重新加载，导致多个定时器被启动。
			
			因此再加上判断：
			
			if (nextProps.loadOver === this.props.loadOver) {
				return
			}
			
			问题解决。
			
			补充：后来发现其实问题根源在于当你切换其他组件时，状态会被重新加载，导致定了多个定时器。
			
			if (nextProps === this.props) {
				return
			}
			
			加上这样一句判断就可以解决。
			
	c.扩展：loading组件实现为一个可复用的对象，而不是一个可复用的组件
	